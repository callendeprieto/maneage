#! /bin/bash
#
# Necessary preparations/configurations for the reproduction pipeline.
#
# Original author:
#     Mohammad Akhlaghi <mohammad@akhlaghi.org>
# Contributing author(s):
#     Your name <your@email.address>
# Copyright (C) 2018, Your Name.
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# A copy of the GNU General Public License is available at
# <http://www.gnu.org/licenses/>.





# Important internal locations
# ----------------------------
#
# These are defined to help make this script more readable.
cdir=reproduce/config
pdir=$cdir/pipeline
pconf=$pdir/LOCAL.mk
ptconf=$pdir/LOCAL_tmp.mk
poconf=$pdir/LOCAL_old.mk
glconf=$cdir/gnuastro/gnuastro-local.conf





# Check mandatory dependencies
# ----------------------------
#
# The list of program names you need for this pipeline is in the `for' loop
# below. In case you don't need Gnuastro, then remove `astnoisechisel' from
# the list.
echo "---------------------"
echo "Checking dependencies"
echo "---------------------"
for prog in bash cat sed make awk grep flock astnoisechisel pdflatex biber; do
    if type $prog > /dev/null; then
        echo "  '$prog' was found."
    else
        echo
        echo "ERROR: '$prog' not found in search path."
        if [ $prog = "flock" ]; then
            echo
            echo "'flock' (file-lock, used for managing parallel operations)"
            echo "is available on GNU/Linux OSs through your package manager,"
            echo "please install it. For other OSs, you can install the "
            echo "implementation at: https://github.com/discoteq/flock"
        fi
        exit 1
    fi
done





# Identify the downloader tool
# ----------------------------
#
# If cURL is already present, that will be used, otherwise, we'll use
# Wget. Since the options specifying the output filename are different
# between the two, we'll also specify the output option within the
# `downloader' variable. So it is important to first give the output
# filename after calling `DOWNLOADER' within the Makefiles, and finish the
# command with the web address.
print_downloader_notice=1
if type curl > /dev/null; then
    downloader="curl -o"
elif type wget > /dev/null; then
    downloader="wget -O";
else
    echo
    echo "======="
    echo "Warning"
    echo "======="
    echo "Couldn't find any of the 'curl' or 'wget' programs. They are used for"
    echo "downloading necessary data if they aren't already present in the"
    echo "specified directories. Therefore the pipeline will crash if the"
    echo "necessary data are not already present on the system."
    echo "======="
    echo
    downloader="no-downloader-found"
    print_downloader_notice=0
fi;
if [ $print_downloader_notice = 1 ]; then
    prog=$(echo "$downloader" | awk '{print $1}')
    echo "  '$prog' will be used for downloading files if necessary."
fi





# If `LOCAL.mk' already exists
# ----------------------------
#
# `LOCAL.mk' is the top-most local configuration for the pipeline. If it
# already exists when this script is run, we'll copy it to a `LOCAL.mk.old'
# file as backup. For example the user might have ran `./configure' by
# mistake.
if [ -f $pconf ]; then
    if mv $pconf $poconf; then
        echo
        echo "======="
        echo "WARNING"
        echo "======="
        echo "  Existing configuration moved to '$poconf'."
        echo
    else
        exit 1
    fi
fi





# Write values obtained so far
# ----------------------------
#
# We'll start writing of the local configuration file with the values that
# have been found so far.
sed -e 's|@downloader[@]|'"$downloader"'|g'           \
    $pconf.in > $ptconf





# Inform the user
# ---------------
#
# Print some basic information so the user gets a feeling of what is going
# on and is prepared on what will happen next.
echo
echo "-----------------------------------------"
echo "Reproduction pipeline local configuration"
echo "-----------------------------------------"
echo
echo "Local settings include things like top-level directories,"
echo "or processing steps."
echo
echo "Pressing 'y' will open the local settings file in an editor"
echo "so you can modify the default values if you want. Each"
echo "variable is thoroughly described in the comments (lines"
echo "starting with a '#') above it."
echo
echo "It is strongly recommended to inspect/edit/set the best "
echo "values for your system (where necessary)."
echo
while [ "$userread" != "y" -a "$userread" != "n" ]
do
    read -p"Edit the default local configuration (y/n)? " userread
done





# Let user to edit local settings
# -------------------------------
#
# We'll open a text editor so the user can read the comments of the
# necessary local settings and set the top directories manually.
if [ $userread = "y" ]; then

    # Open a text editor to set the given directories
    if   emacs $ptconf; then ready=1
    elif gedit $ptconf; then ready=1
    elif vi    $ptconf; then ready=1
    else
        echo
        echo "================="
        echo "IMPORTANT WARNING"
        echo "================="
        echo "No common text editor was found on this system."
        echo "Please set the values in the following files manually:"
        echo "  - $pconf"
        # --------- Delete for no Gnuastro ---------
        echo "  - $glconf"
        # ------------------------------------------
        echo "================="
        echo
        ready=0
    fi
else
    ready=1
fi





# Notice for top of files
# -----------------------
#
# In case someone opens the files output from the configuration scripts in
# a text editor and wants to edit them, it is important to let them know
# that their changes are not going to be permenant.
function create_file_with_notice() {
    if echo "# IMPORTANT: file will be RE-WRITTEN after './configure'" > $1
    then
        echo "#"                                                      >> $1
        echo "# This file was created during the reproduction"        >> $1
        echo "# pipeline's configuration ('./configure'). Therefore," >> $1
        echo "# it is not under version control and any manual "      >> $1
        echo "# changes to it will be over-written if the pipeline "  >> $1
        echo "# is re-configured."                                    >> $1
        echo "#"                                                      >> $1
    else
        exit 1
    fi
}





# --------- Delete for no Gnuastro ---------
# Gnuastro's local configuration settings
#
# The `minmapsize' parameter has been set by the user, so we can read it
# and add it to Gnuastro's local configuration file.
create_file_with_notice $glconf
mm=$(awk '$1=="MINMAPSIZE"{print $3}' $ptconf)
echo "# Minimum number of bytes to use HDD/SSD instead of RAM." >> $glconf
echo " minmapsize $mm"                                          >> $glconf
# ------------------------------------------





# Final pipeline local settings
# -----------------------------
#
# Make the final file that will be used and delete the temporary file along
# with a possible file ending with `~' that is put there by some editors.
create_file_with_notice $pconf
cat $ptconf >> $pconf
rm -f $ptconf $ptconf"~"





# Print a final notice
# --------------------
#
# The configuration is now complete, we can inform the user on the next
# step(s) to take.
echo
if [ $ready = 1 ]; then
    echo "This reproduction pipeline has been configured for this system."
    echo "Please run the following command to start the pipeline:"
else
    echo "AFTER MANUALLY EDITING THE FILE(S) ABOVE, please run the following"
    echo "commands to run the pipeline."
fi
echo "(Replace '8' with the number of CPU threads available)"
echo
echo "    make -j8"
echo
echo "To change the configuration later, please re-run './configure',"
echo "DO NOT manually edit the relevant files."
echo
