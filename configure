#! /bin/sh
#
# Necessary preparations/configurations for the reproduction pipeline.
#
# Original author:
#     Mohammad Akhlaghi <mohammad@akhlaghi.org>
# Contributing author(s):
#     Your name <your@email.address>
# Copyright (C) 2018, Your Name.
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# A copy of the GNU General Public License is available at
# <http://www.gnu.org/licenses/>.





# Script settings
# ---------------
# Stop the script if there are any errors.
set -e





# Important internal locations
# ----------------------------
#
# These are defined to help make this script more readable.
topdir=$(pwd)
installedlink=.local
lbdir=reproduce/build
cdir=reproduce/config

pdir=$cdir/pipeline
pconf=$pdir/LOCAL.mk
ptconf=$pdir/LOCAL_tmp.mk
poconf=$pdir/LOCAL_old.mk
glconf=$cdir/gnuastro/gnuastro-local.conf





# Delete final target of configuration
# ------------------------------------
#
# Without the top-level `Makefile' the user can't run `make' in this
# directory. But we only want to make it available when we know everything
# else is set up. So we'll delete it at the start of this configuration and
# reset the link in the absolute end.
rm -f Makefile





# Notice for top of generated files
# ---------------------------------
#
# In case someone opens the files output from the configuration scripts in
# a text editor and wants to edit them, it is important to let them know
# that their changes are not going to be permenant.
function create_file_with_notice() {
    if echo "# IMPORTANT: file can be RE-WRITTEN after './configure'"  > $1
    then
        echo "#"                                                      >> $1
        echo "# This file was created during the reproduction"        >> $1
        echo "# pipeline's configuration ('./configure'). Therefore," >> $1
        echo "# it is not under version control and any manual "      >> $1
        echo "# changes to it will be over-written if the pipeline "  >> $1
        echo "# is re-configured."                                    >> $1
        echo "#"                                                      >> $1
    else
        echo; echo "Can't write to $1"; echo;
        exit 1
    fi
}





# Get absolute address
# --------------------
#
# Since the build directory will go into a symbolic link, we want it to be
# an absolute address. With this function we can make sure of that.
function absolute_dir() {
    echo "$(cd "$(dirname "$inbdir")" && pwd )/$(basename "$inbdir")"
}





# Inform the user
# ---------------
#
# Print some basic information so the user gets a feeling of what is going
# on and is prepared on what will happen next.
cat <<EOF

-----------------------------------------
Reproduction pipeline local configuration
-----------------------------------------

Local configuration includes things like top-level directories, or
processing steps.

It is STRONGLY recommended to read the comments, and set the best values
for your system (where necessary).

EOF





# What to do with possibly existing configuration file
# ----------------------------------------------------
#
# `LOCAL.mk' is the top-most local configuration for the pipeline. If it
# already exists when this script is run, we'll make a copy of it as backup
# (for example the user might have ran `./configure' by mistake).
rewritepconfig=yes
rewritegconfig=yes
if [ -f $pconf ] || [ -f $glconf ]; then

    # If it already exits, see what the user wants to do.
    echo "Atleast one local configuration file already exists."
    echo
    while [ "$userread" != "y" -a "$userread" != "n" ]
    do
        read -p"Re-write existing configuration file(s) (y/n)? " userread
    done

    # Set `rewriteconfig'.
    if [ $userread = "n" ]; then
        if [ -f $pconf  ]; then rewritepconfig=no; fi
        if [ -f $glconf ]; then rewritegconfig=no; fi
    fi
    echo
fi





# Identify the downloader tool
# ----------------------------
#
# We use Wget for the downloading. As of November 12th, cURL couldn't
# download Ghostscript's source from its standard address, but Wget
# could. Until November 12th, we would check for cURL or Wget, so we
# defined this check system here (explained in the next paragraph of this
# comment). For now its redundant, but if the fix for cURL is found later,
# we can add it back (or add other downloaders). So we'll keep it.
#
# Since the options specifying the output filename are different between
# the two, we'll also specify the output option within the `downloader'
# variable. So it is important to first give the output filename after
# calling `DOWNLOADER' within the Makefiles, and finish the command with
# the web address.
if [ $rewritepconfig = yes ]; then
    if type wget > /dev/null 2>/dev/null; then
        downloader="wget -O";
    else
        cat <<EOF


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!         Warning        !!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Couldn't find GNU Wget. It is used for downloading necessary programs and
data if they aren't already present in the specified directories. Therefore
the pipeline will crash if the necessary files are not already present on
the system.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


EOF
        downloader="no-downloader-found"
    fi;
fi





# Build directory
# ---------------
if [ $rewritepconfig = yes ]; then
    cat <<EOF

===============
Build directory
===============

The "source" (this directory) and "build" directories are treated
separately. This greatly helps in managing the many intermediate files that
are created during the build. The intermediate build files don't need to be
archived or backed up: you can always re-build them with this reproduction
pipeline. The build directory also needs a relatively large amount of free
space (atleast serveral Giga-bytes).

'$lbdir' (a symbolic link to the build directory) will also be created
during this configuration. It can help encourage you to set the actual
build directory in a very different address from this one (one that can be
deleted and has large volume), while having easy access to it from here.

EOF
    bdir=""
    junkname=pure-junk-974adfkj38
    while [ x$bdir == x ]
    do
        # Ask the user.
        read -p"Please enter the top build directory: " inbdir

        # If it exists, see if we can write in it. If not, try making it.
        if [ -d $inbdir ]; then
            if mkdir $inbdir/$junkname 2> /dev/null; then
                bdir=$(absolute_dir $inbdir)
                echo " -- Build directory: '$bdir'"
                rm -rf $inbdir/$junkname
            else
                echo " -- Can't write in '$inbdir'"
            fi
        else
            if mkdir $inbdir 2> /dev/null; then
                bdir=$(absolute_dir $inbdir)
                echo " -- Build directory set to (the newly created): '$bdir'"
            else
                echo " -- Can't create '$inbdir'"
            fi
        fi
    done
fi





# Dependency tarball directory
# ----------------------------
if [ $rewritepconfig = yes ]; then
    junkddir="/optional/path"
    ddir=$junkddir
    cat <<EOF

---------------------------------------
(OPTIONAL) Dependency tarball directory
---------------------------------------

To ensure an identical build environment, the pipeline will use its own
build of the programs it needs. Therefore the tarball of the relevant
programs are necessary for this pipeline. If a tarball isn't present in the
specified directory, *IT WILL BE DOWNLOADED* by the pipeline.

Therefore, if you don't specify any directory here, or it doesn't contain
the tarball of a dependency, it is necessary to have an internet
connection. The pipeline will download the tarballs it needs automatically.

EOF
    read -p"(OPTIONAL) Directory of dependency tarballs ($ddir): " tmpddir
    if [ x"$tmpddir" != x ]; then
        ddir=$tmpddir
        echo " -- Using '$ddir'"
    fi
    echo
fi





# Memory mapping minimum size
# ---------------------------
if [ $rewritegconfig = yes ]; then
    defaultminmapsize=1000000000
    minmapsize=$defaultminmapsize
    cat <<EOF

---------------------------
Minimum memory mapping size
---------------------------

Some programs (for example Gnuastro) can deal with cases where the local
system doesn't have enough memory (RAM) to keep large files. For example,
they will create memory-mapped (mmap) files on the HDD or SSD and
read/write to/from them instead of RAM. This will ofcourse, slow down the
processing, but atleast the program won't crash.

Since the memory requirements of different systems are different and it has
no effect on the software's final result, the minimum size of an allocated
array to warrant a mapping to HDD/SSD instead of RAM must also be defined
here. This value will be used in the programs that support this feature.

EOF

    read -p"Minimum memory mapping size in bytes (default: $minmapsize): " \
         tmpminmapsize
    if [ x"$tmpminmapsize" != x ]; then
        minmapsize=$tmpminmapsize
        echo " -- Using '$minmapsize'"
    fi
fi





# Write the parameters into the local configuration file.
if [ $rewritepconfig = yes ]; then
    create_file_with_notice $pconf
    sed -e's|@bdir[@]|'"$bdir"'|'              \
        -e's|@ddir[@]|'"$ddir"'|'              \
        -e's|@downloader[@]|'"$downloader"'|'  \
        $pconf.in >> $pconf
else
    # Read the values from existing configuration file.
    inbdir=$(awk     '$1=="BDIR"             {print $NF}' $pconf)
    ddir=$(awk       '$1=="DEPENDENCIES-DIR" {print $NF}' $pconf)
    downloader=$(awk '$1=="DOWNLOADER"       {print $NF}' $pconf)

    # Make sure `bdir' is an absolute path and it exists.
    bdir=$(absolute_dir $inbdir)
    if ! [ -d $bdir ]; then mkdir $bdir; fi
fi





# --------- Delete for no Gnuastro ---------
# Get the version of Gnuastro that must be used.
depverfile=reproduce/config/pipeline/dependency-versions.mk
gversion=$(awk '$1=="gnuastro-version" {print $NF}' $depverfile)

# Gnuastro's local configuration settings
if [ $rewritegconfig = yes ]; then
    create_file_with_notice $glconf
    echo "# Minimum number of bytes to use HDD/SSD instead of RAM." >> $glconf
    echo " minmapsize $minmapsize"                                  >> $glconf
    echo                                                            >> $glconf
    echo "# Version of Gnuastro that must be used."                 >> $glconf
    echo " onlyversion $gversion"                                   >> $glconf
else
    ingversion=$(awk '$1=="onlyversion" {print $NF}' $glconf)
    if [ x$ingversion != x$gversion ]; then
        echo "______________________________________________________"
        echo "!!!!!!!!!!!!!!!!!!CONFIGURATION ERROR!!!!!!!!!!!!!!!!!"
        echo
        echo "Gnuastro's version in '$glconf' ($ingversion) doesn't match the tarball version that this pipeline was designed to use in '$depverfile' ($gversion). Please re-run after removing the former file:"
        echo
        echo "   $ rm $glconf"
        echo "   $ ./configure"
        echo
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        echo
        exit 1
    fi
fi
# ------------------------------------------





# Setup the top-level directories
# -------------------------------
rm -f $lbdir
ln -s $bdir $lbdir

depdir=$bdir/dependencies
if ! [ -d $depdir ];  then mkdir $depdir; fi

tardir=$depdir/tarballs
if ! [ -d $tardir ];  then mkdir $tardir; fi

instdir=$depdir/installed
if ! [ -d $instdir ]; then mkdir $instdir; fi

rm -f $installedlink
ln -s $instdir $installedlink

# --------- Delete for no Gnuastro ---------
rm -f .gnuastro
ln -s $(pwd)/reproduce/config/gnuastro .gnuastro
# ------------------------------------------





# Build basic dependencies
# ------------------------
tsec=10
cat <<EOF

-------------------------
Building dependencies ...
-------------------------

Necessary dependency programs and libraries will be built in $tsec sec.

NOTE: the built software will NOT BE INSTALLED on your system (no root
access is required). They are only for local usage by this reproduction
pipeline. They will be installed in:

  $bdir/dependencies/installed

EOF
sleep $tsec
make -f reproduce/src/make/dependencies-basic.mk #-j2





# Rest of dependencies
# --------------------
#
# We will be making all the dependencies before running the top-level
# Makefile. To make the job easier, we'll do it in a Makefile, not a
# script. Bash and Make were the tools we need to run Makefiles, so we had
# to build them in this script. But after this, we can rely on Makefiles.
.local/bin/make -f reproduce/src/make/dependencies.mk #-j8





# Print a final notice
# --------------------
#
# The configuration is now complete, we can inform the user on the next
# step(s) to take.
echo
echo "----------------"
echo "The reproduction pipeline and its environment are SUCCESSFULLY configured."
echo
echo "Please run the following command to start."
echo "(Replace '8' with the number of CPU threads)"
echo
echo "    ./.local/bin/make -j8"
echo
echo "To change the configuration later, please re-run './configure',"
echo "DO NOT manually edit the relevant files."
echo





# Final target: the Makefile
# --------------------------
#
# To see why this is the last step of the configuration, see above (when we
# delete the top-level Makefile at the start of this script).
ln -s $(pwd)/reproduce/src/make/Top-Makefile Makefile
